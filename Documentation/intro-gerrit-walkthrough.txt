= Gerrit 使用范例

让我们分析下一个代码修改被合并的完整流程以理解 Gerrit 是如何运作的。在此例中，服务器的配置参数为：

* *Hostname*: gerrithost
* *HTTP 端口*: 8080
* *SSH 端口*: 29418

在这个范例中，我们将在以下阶段跟随 Max 和 hannah 两位开发者开发 +RecipeBook+ 项目：

. 产生修改
. 开始审查
. 审查修改
. 修订修改
. 验证修改
. 合并修改

注：此节中项目与命令仅用于演示参考。

== 产生修改

Max 决定修改 +RecipeBook+ 的代码。他要做的第一步是得到目前的项目源码。他使用了如下 `git clone` 命令：

----
git clone ssh://gerrithost:29418/RecipeBook.git RecipeBook
----

在他成功 clone 完项目后，他需要让他的 commits 能自动添加 link:user-changeid.html[Change-Id]。这能让 Gerrit 将同一修改的不同版本关联到一起。

....
scp -p -P 29418 gerrithost:hooks/commit-msg RecipeBook/.git/hooks/
chmod u+x .git/hooks/commit-msg
....

NOTE: 欢迎查看 link:cmd-hook-commit-msg.html[commit-msg Hook] 了解关于添加 Change-Id 以及 Commit Message Hook 的更多内容。

== 开始审查

Max 下一步要提交修改以供审查。他将使用 `git push origin HEAD:refs/for/master` 命令。

----
$ <work>
$ git commit
[master 9651f22] Change to a proper, yeast based pizza dough.
 1 files changed, 3 insertions(+), 2 deletions(-)
$ git push origin HEAD:refs/for/master
Counting objects: 5, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 542 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
remote:
remote: New Changes:
remote:   http://gerrithost:8080/68
remote:
To ssh://gerrithost:29418/RecipeBook.git
 * [new branch]      HEAD -> refs/for/master
----

Gerrit 使用 `refs/for/master` 分支来创建对 master 分支的修改审查。如果 Max 希望更改被合并到其他分支，他需要修改命令为 `git push origin HEAD:refs/for/<branch_name>`。

这条命令同时也将输出这个修改的代码审查网址，打开将显示如下界面：

.Gerrit Code Review Screen
image::images/intro-quick-new-review.jpg[Gerrit Review Screen]

这是 Gerrit 代码审查界面，其他代码贡献者可以审查他的修改。Max 也可以做其他的操作：

* 对比代码变动（link:user-review-ui.html#diff-preferences[diff]）
* 增加 link:user-review-ui.html#inline-comments[针对某行代码的] 或
  link:user-review-ui.html#reply[针对整个修改的] 评论以询问审查者们的意见
* link:intro-user.html#adding-reviewers[添加审查者]

在此例中，Max 将手动添加 Hannah 来审查他的修改。

== 审查修改

现在让我们把视角切换到 Hannah 来看看她是如何审查 Max 的修改的。

正如前文所说，Max 选择手动添加 Hannah 为审查者。Gerrit 提供了以下几种方式让 Hannah 找到这一修改：

* 使用 link:user-search.html[搜索] 功能
* 在 *Changes* 菜单中选择 *Open*
* 设置好 link:user-notify.html[email 通知] 来跟进进度（同样适用于未被添加为审查者的修改）

因为 Max 添加了 Hannah 为审查者，她将收到一封 email 告诉她这个修改。她可以打开 Gerrit 并找到 Max 的修改。

.Gerrit Code Review Screen
image::images/intro-quick-new-review.jpg[Gerrit Review Screen]

注意到两行 "Need":

----
* Need Verified
* Need Code-Review
----

这两行表明了在修改合并之前必须完成的审查内容，默认配置下为：

* *Code-Review*. 这项需要团队中的其他人审查代码，确保它符合项目规范、代码规范等要求；
* *Verified*. 这项将检查代码可以正常编译、运行，且通过所有的单元测试；

总的来说，*Code-Review* 将需要团队中其他人查看代码，而 *Verified* 将会由 CI 服务器自动完成（例如：link:https://wiki.jenkins-ci.org/display/JENKINS/Gerrit+Trigger[Gerrit Trigger Jenkins Plugin]）。

IMPORTANT: Code-Review 和 Verified 审查需要不同的权限，这运行团队将这些任务分开。比如说，一个自动审查程序有权限 Verify，但是没有权限 Code Review。

在 Gerrit 界面中，Hannah 可以开始审查 Max 的修改。她可以用对比或者一体的视图来查看代码变化。她也可以添加 link:user-review-ui.html#inline-comments[针对某行代码的] 或 link:user-review-ui.html#reply[针对整个修改的] 评论。

Hannah 选择用对比视图：

.Side By Side Patch View
image::images/intro-quick-review-line-comment.jpg[Adding a Comment]

Hannah 看完了修改决定给出她的反馈。她点击了 *Review* 按钮，来对修改进行评分。

.Reviewing the Change
image::images/intro-quick-reviewing-the-change.jpg[Reviewing the Change]

对于 Hannah 和 Max 的团队，Code Review 投票支持由 -2 到 +2 的评分：

* `+2` 修改很好请合并
* `+1` 修改不错，但其他人需要看一眼
* `0` 不评分
* `-1` 我倾向于不合并
* `-2` 请不要合并

一个修改必须要有至少一个 ·+2· 且没有 `-2` 才能合并。这些评分不会累加，也就是说两个 `+1` 不能替代一个 `+2`。

NOTE: 这些是默认配置。若要了解更多关于如何自定义你自己的工作流程，请查阅 link:config-project-config.html[项目配置文件]。

Hannah 发现了 Max 代码的一个问题，选择给 `-1` 分。她使用了 *Cover Message* 来提供额外的问题反馈。写完后，Hannah 点击了 *Publish Comments* 按钮来发布评论。此时，所有人将可以看到她的投票和反馈信息。

== 修订修改

晚些时候，Max 决定看看修改的状态，于是留意到了 Hannah 的反馈。他打开了源文件进行修改。由于 Max 的修改已经包含了一个 Change-Id，他只需要按照典型的 git 工作流来更新他的 commit即可：

* Check out commit
* Amend commit
* Push commit to Gerrit

----
$ <checkout first commit>
$ <rework>
$ git commit --amend
$ git push origin HEAD:refs/for/master
Counting objects: 5, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 546 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
remote: Processing changes: updated: 1, done
remote:
remote: Updated Changes:
remote:   http://gerrithost:8080/68
remote:
To ssh://gerrithost:29418/RecipeBook.git
 * [new branch]      HEAD -> refs/for/master
----

请留意这次命令输出与之前略有不同。这次，输出中写到修改被更新了。

上传了修订过的 commit 后，Max 在 Gerrit 网页上就可以看到修订后的修改了。

.Reviewing the Rework
image::images/intro-quick-review-2-patches.jpg[Reviewing the Rework]

这个修改有两个 patch set 分别对应了最初的修改和这次修订过后的修改。

当 Hannah 再看 Max 的修改时，她就可以看到 Max 做出的修订。如果 Hannah 觉得没问题了，就可以投 `+2`。

== 验证修改

Hannah 的 `+2` 投票意味着 Max 的修改满足了 *Needs Review* 审查需求。它还需要通过 *Needs Verified* 需求才能合并

验证检查需要确保程序能正常工作。这种检查通常包括编译、单元测试等。你可以配置这种检查具体包含什么。

NOTE: 此例子只是用了 Gerrit 的默认工作流，项目可以添加其他自定义的审查项，也可以完全删掉 Verified 检查。

验证通常由 CI 自动完成，如 link:https://wiki.jenkins-ci.org/display/JENKINS/Gerrit+Trigger[Gerrit Trigger Jenkins Plugin]。然而，有些时候修改可能需要人工验证。为了这些情况，Gerrit 将每个修改处理成一个 git 分支以供下载经修改后的代码。Gerrit 网页端提供了一个 link:user-review-us.html#download[*download*] 按钮来让审查者更轻松地拉取这一修改的代码。如要手工确认修改，审查者必须有 link:config-labels.html#label_Verified[Verified] 权限。

NOTE: Verify 和 Code Review 可由同一审查者完成，也可由不同人完成。

.Verifying the Change
image::images/intro-quick-verifying.jpg[Verifying the Change]

与 Code Review 不同，验证只有通过与不通过，所以 Hannah 只能打 `-1` 或 `+1` 分。一个修改必须有至少一个 `+1` 且无 `-1` 才能通过。

Hannah 手工选择了 `+1` 验证，Max 的修改已经准备好合并了。

== 合并修改

NOTE: 为了中文开发者的习惯，此处将 submit change 译为了 merge change，以和 push initial change commit 加以区分。但在英文文档中，请留意此处所指的是 submit change。

Max 准备好合并修改了。他在 WEB 端打开修改，点击 *Publish and Submit* 按钮。

此时，Max 的修改已被合并到 master 分支。

== 下一步

这份范例简要涵盖了在默认的 Gerrit 工作流中代码修改流程。要想进一步了解，你可以：

* 阅读link:intro-user.html[项目开发者指南]
* 阅读link:intro-project-owner.html[项目维护者指南]

GERRIT
------
这份文档是 link:index.html[Gerrit Code Review] 的一部分，由 mailto:i@adamyi.com[Adam Yi] 翻译。

SEARCHBOX
---------
