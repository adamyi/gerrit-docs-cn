= 项目开发者指南

这是一份面向项目开发者的 Gerrit 指南。它介绍了标准的 Gerrit 工作流以及用户可以怎样以自己的偏好来使用 Gerrit。

在阅读本指南前，请确保自己熟悉 link:http://git-scm.com/[Git] 及其基本命令与工作流。

[[gerrit]]
== Gerrit 是什么？

Gerrit 是一个提供link:access-control.html[访问控制]的带有 WEB 代码审查（Code Review）前端的 Git 服务器。代码审查是 Gerrit 的核心功能，但也可以选择不使用 Code Review 而仅把 Gerrit 当作普通 Git 服务器使用，详情请见 link:#no-code-review[不启用 Code Review]。

[[tools]]
== 客户端软件

Gerrit 使用 git 协议，也就是说你*并不*需要安装任何的 Gerrit 特有客户端，仅使用常规的 git 客户端，比如 link:http://git-scm.com/[git 命令行] 或者 Eclipse 中的 link:http://eclipse.org/egit/[EGit] 就足够了。

当然，你也可以用一些专门的客户端，不过这不是必须的：

* link:http://eclipse.org/mylyn/[Mylyn Gerrit Connector]: Gerrit
  integration with Mylyn
* link:https://github.com/uwolfer/gerrit-intellij-plugin[Gerrit
  IntelliJ Plugin]: Gerrit integration with the
  link:http://www.jetbrains.com/idea/[IntelliJ Platform]
* link:https://play.google.com/store/apps/details?id=com.jbirdvegas.mgerrit[
  mGerrit]: Android client for Gerrit
* link:https://github.com/stackforge/gertty[Gertty]: Console-based
  interface for Gerrit

[[clone]]
== Clone Gerrit 项目

Clone Gerrit 项目仅需使用常规的 `git clone` 命令即可。

.Clone Gerrit Project
----
  $ git clone ssh://gerrithost:29418/RecipeBook.git RecipeBook
  Cloning into RecipeBook...
----

用于 clone 的 URL 可以在 Gerrit WEB 端 `Projects` > `List` > <project-name> > `General` 中找到。

Gerrit 兼容 link:user-upload.html#ssh[SSH] 和 link:user-upload.html#http[HTTP(S)] 协议来操作 git。

[NOTE]
如要使用 SSH，你需要link:user-upload.html#ssh[在 `Settings` 中设置你的 SSH 公钥].

[[code-review]]
== 代码审查工作流

在 Gerrit 中，每一个 commit 在合并前必须要接受#review-change[代码审查]。修改作者需要以一个`修改`的形式link:user-upload.html#push_create[上传 commit]。任何修改在合并前都将先link:#change-ref[暂存]起来以供审查。作者可根据审查意见修改自己的代码，并通过link:#upload-patch-set[修订原 commit 并上传新 patch set]的方式更新修改。这样，一个修改在被合并回代码库前将一直被迭代更新。

[[upload-change]]
== 上传修改

可以通过 push commit 来向 Gerrit 上传修改。 Commit 必须要上传至 `refs/for/<target-branch>`。`refs/for/` 前缀让 Gerrit 明白这些 commits 需要审查而非绕过审查直接 push 进代码库里。对于目标分支，你可以使用像 `master` 一样的短名，也可使用完整名称，如 `refs/heads/master`。

.Push for Code Review
----
  $ git commit
  $ git push origin HEAD:refs/for/master

  // this is the same as:
  $ git commit
  $ git push origin HEAD:refs/for/refs/heads/master
----

.Push with bypassing Code Review
----
  $ git commit
  $ git push origin HEAD:master

  // this is the same as:
  $ git commit
  $ git push origin HEAD:refs/heads/master
----

[[push-fails]]
[NOTE]
如果 push 失败了，请参考link:error-messages.html[错误信息文档].

[[change-ref]]
当一个 commit 被 push 以进行审计时，Gerrit 将把它暂存进 `refs/changes/XX/YYYY/ZZ`，其中 `YYYY` 是修改的编号，`ZZ` 是 patch set 编号，`XX` 是修改编号的末两位，例如 `refs/changes/20/884120/1`。不过，你不需要理解这一命名格式就可以使用 Gerrit。

[[fetch-change]]
使用这一 ref，也可以抓取相应的 commit 用于本地验证代码。

.Fetch Change
----
  $ git fetch https://gerrithost/myProject refs/changes/74/67374/2 && git checkout FETCH_HEAD
----

[NOTE]
git fetch 命令可由 WEB 界面中的 link:user-review-ui.html#download[download 按钮] 获得。

`refs/for/` 前缀是 Gerrit 中的 “push 进行审查”，但标准 git 客户端将把这一行为理解为所有的代码都被 push 到了相同的分支，比如 push 到了 `refs/for/master`。但事实上，push 到了这一 ref 的 commits 将会在 `refs/changes/` 下建立新的分支，并且 Gerrit 将创建一个新的修改。

[[change]]
每个修改都包含一个 link:user-changeid.html[Change-Id]，元数据（所有者、项目、目标分支等）、一个或多个 patch set、评论与审查投票。一个 patch set 本质上是一个 git commit。每个 patch set 都代表着这个修改的一个版本，并将替代旧的 patch set。最后上传的 patch set 是最新的，也是最终合并所用到的。旧的patch set将不会被合并至目标分支中。

[[change-id]]
Change-Id 可以让 Gerrit 知道收到 commit 时应该创建新的修改还是创建一个已有修改的新 patch set。

Change-Id 本质上是由大写`I`开头的 SHA-1 hash 字符串，位于 commit message 的结尾（最后一个段落），例如：

----
  Improve foo widget by attaching a bar.

  We want a bar, because it improves the foo by providing more
  wizbangery to the dowhatimeanery.

  Bug: #42
  Change-Id: Ic8aaa0728a43936cd4c6e1ed590e01ba8f0fbf5b
  Signed-off-by: A. U. Thor <author@example.com>
----

如果一个带有 Change-Id 的 commit 被 push 进行审查，Gerrit 将检查该 Change-Id 是否出现在该目标分支先前的其他修改的 commit 中。如果存在，Gerrit 将针对该修改创建一个新的 patch set；否则 Gerrit 将用给定的 Change-Id 创建一个新的修改。

如果一个不带 Change-Id 的 commit 被 push 进行审查，Gerrit 将自动创建一个新修改并生成一个 Change-Id 追加到 commit message 末尾。由于 Change-Id 并未出现在本地的 commit message 中，开发者必须手动将这个 Change-Id 添加进 commit message 中 才能上传新 patch set 更新这一修改。大部分项目已经配置了link:project-configuration.html#require-change-id[新修改必须带有 Change-Id] 以避免不小心错误地创建新的修改而非新的 patch set。在这种配置下，不带 Change-Id 的 commit push 将会收到错误 link:error-missing-changeid.html[missing Change-Id in commit message footer]。但是，如果开发者将 commit push 到某一修改对应的专门的 ref （例如`refs/changes/74/67374`），commit 将自动成为该修改的新 patch set（哪怕没有Change-Id）。

在标准 git 客户端中，amend 和 rebase 一个 commit 默认会自动保留原 Change-Id，所以修改后的 commit 被 push 后将自动成为原修改的新 patch set。但如要使用其他方式产生新 patch set，请确保 commit message 包含原 Change-Id。

.Push new Patch Set
----
  $ git commit --amend
  $ git push origin HEAD:refs/for/master
----

Change-Id 对于某一特定项目的特定分支是唯一的。也就是说，在不同分支中修复同一个问题的 commit 应该使用相同的 Change-Id。如果 commit 是被 cherry-pick 到其他分支的，那么 Change-Id 也会默认保持不变。这样可以确保用户可以通过单一的 Change-Id 在 Gerrit WEB端link:user-search.html[搜索]到所有分支中的这一修复。
通过安装 `commit-msg` hook，Change-Id 可以被自动创建。具体请见 link:user-changeid.html#creation[Change-Id 文档]。

除了手动给每个项目安装 `commit-msg` hook 之外，你还可以将 hook copy 至 link:http://git-scm.com/docs/git-init#_template_directory[git template directory]，这将使这个 hook 被自动 copy 至之后所有新 clone 的项目的 .git 目录内。

[[review-change]]
== 审查修改

在link:#upload-change[上传修改]之后，审查者可以通过 Gerrit WEB端进行线上代码审查。审查者可以直接看到代码并link:user-review-ui.html#inline-comments[针对某行或部分代码发表评论]。他们也可以link:user-review-ui.html#reply[针对整个修改发表总结性的评论并按照审查标签进行投票]。具体请参考 link:user-review-ui.html[审查界面文档] explains the

用户也可以根据 link:user-review-ui.html#diff-preferences[diff preferences] 来配置关于如何显示代码修改对比的一些参数。

[[upload-patch-set]]
== 上传新的 Patch Set

当审查者反馈问题后，开发者可以重新修改代码并上传新的的 commit 版本，也就是新的 patch set。

开发者需要 amend 上一个 patch set 的 commit。如果需要，这个 commit 可以通过在 Gerrit WEB 端给出的 link:user-review-ui.html#download[下载命令] 来 fetch。

请务必确保 commit message 中包含原修改的 link:user-changeid.html[Change-Id]。正常情况下，amend commit 会自动保留原 Change-Id。

.Push Patch Set
----
  // fetch and checkout the change
  // (checkout command copied from change screen)
  $ git fetch https://gerrithost/myProject refs/changes/74/67374/2 && git checkout FETCH_HEAD

  // rework the change
  $ git add <path-of-reworked-file>
  ...

  // amend commit
  $ git commit --amend

  // push patch set
  $ git push origin HEAD:refs/for/master
----

[NOTE]
请不要 amend 一个已经被合并了的commit

上传新的 patch set 将会导致系统发送 email 通知该修改的所有审查者。

[[multiple-features]]
== 同时开发多流程

代码审查需要时间，而开发者可以利用这段时间来实现其他功能或更新。每一个功能都应该在自己单独的本地功能分支中开发，而这些分支应当基于目标分支当前 HEAD 所指 commit（最新的已合并 commit）。这样可以确保不同的修改之间不存在依赖关系以便他们被独立审查。如果需要，也可以基于一个正在审查的修改开发新功能。这将创建不同修改之间的依赖关系。只有当一个修改所依赖的其他修改都被合并后才能被合并。依赖关系可以在 WEB 端的 link:user-review-ui.html#related-changes-tab[Related Changes] 标签栏中看到。

[[watch]]
== 关注项目

您可以通过link:user-notify.html#user[关注项目]来订阅该项目的所有新的修改。如果关注的项目有修改被上传或修改（新 Patch Set），Gerrit 将自动发送一封 email 通知您。您可以通过link:user-searh.html[修改搜索表达式]过滤通知并决定哪些事件将触发 email 通知。比如说，使用 `+branch:master file:^.*\.txt$+` 将仅通知您希望合并进 master 的有一个 txt 拓展名的文件有变化的修改。

通常来说，项目团队成员将关注自己的项目并选取其中他们感兴趣的修改进行审查。

项目维护者也可配置link:intro-project-owner.html#notifications[针对项目的消息通知].

[[adding-reviewers]]
== 添加审查者

在 WEB 端，用户可以给修改添加审查者。被添加的审查者将收到 email 通知。

这一功能主要用于寻求某一对被修改代码的功能比较了解的人或是被修改代码的原作者的意见。通常来说，我们不需要给每个修改都手动添加审查者，而是依赖于团队对项目的关注于兴趣以及修改的重要性来审查的。

同时，也有一些插件可以link:intro-project-owner.html#reviewers[自动添加审查者] （比如根据配置或者根据 git blame）。如果需要这一功能，项目维护者应当与 Gerrit 管理员讨论。

[[dashboards]]
== Dashboards

Gerrit supports a wide range of link:user-search.html#search-operators[
query operators] to search for changes by different criteria, e.g. by
status, change owner, votes etc.

The page that shows the results of a change query has the change query
contained in its URL. This means you can bookmark this URL in your
browser to save the change query. This way it can be easily re-executed
later.

Several change queries can be also combined into a dashboard. A
dashboard is a screen in Gerrit that presents the results of several
change queries in different sections, each section having a descriptive
title.

A default dashboard is available under `My` > `Changes`. It has
sections to list outgoing reviews, incoming reviews and recently closed
changes.

Users can also define link:user-dashboards.html#custom-dashboards[
custom dashboards]. Dashboards can be bookmarked in a browser so that
they can be re-executed later.

It is also possible to link:#my-menu[customize the My menu] and add
menu entries for custom queries or dashboards to it.

Dashboards are very useful to define own views on changes, e.g. you can
have different dashboards for own contributions, for doing reviews or
for different sets of projects.

[NOTE]
You can use the link:user-search.html#limit[limit] and
link:user-search.html#age[age] query operators to limit the result set
in a dashboard section. Clicking on the section title executes the
change query without the `limit` and `age` operator so that you can
inspect the full result set.

Project owners can also define shared
link:user-dashboards.html#project-dashboards[dashboards on
project-level]. The project dashboards can be seen in the web UI under
`Projects` > `List` > <project-name> > `Dashboards`.

[[submit]]
== 合并修改

NOTE: 为了中文开发者的习惯，此处将 submit change 译为了 merge change，以和 push initial change commit 加以区分。但在英文文档中，请留意此处所指的是 submit change。

合并修改至目标分支需要 link:access-control.html#category_submit[Submit] 权限。用户仅需在 WEB 端点击 link:user-review-ui.html#submit[Submit 按钮]即可。

修改必须先在所有link:user-review-ui.html#vote[审查标签]中取得批准才能合并。默认配置下，这意味着在每一个标签中都至少有一个可给出的最高分且没有可给出的最低分（即一票否决）。然而，项目也可以配置link:intro-project-owner.html#labels[自定义标签]和link:intro-project-owner.html#submit-rules[自定义合并规则
]来控制何时修改可以被合并。

可link:intro-project-owner.html#submit-type[分项目配置]的link:project-configuration.html#submit_type[合并方式（submit type）]可以调整修改被合并到目标分支的方式。

合并修改可能会因为代码冲突而出错。在这种情况下，你需要在本地 rebase commit 并解决冲突。之后，你可以上传一个新的 patch set。

如果一个修改因为代码冲突问题不能合并，将在 WEB 端高亮标记，并配有 `Cannot Merge` 标签。

[[rebase]]
== Rebase 修改

当一个修改正在审查阶段，目标分支也可能有其他的更新。在这种情况下，这一修改可以被 rebase 到目标分支的新 HEAD 上。当没有冲突时，rebase 可直接在 link:user-review-ui.html#rebase[WEB 界面完成]，否则必须在本地完成。

.Rebase a Change locally
----
  // update the remote tracking branches
  $ git fetch

  // fetch and checkout the change
  // (checkout command copied from change screen)
  $ git fetch https://gerrithost/myProject refs/changes/74/67374/2 && git checkout FETCH_HEAD

  // do the rebase
  $ git rebase origin/master

  // resolve conflicts if needed and stage the conflict resolution
  ...
  $ git add <path-of-file-with-conflicts-resolved>

  // continue the rebase
  $ git rebase --continue

  // push the commit with the conflict resolution as new patch set
  $ git push origin HEAD:refs/for/master
----

仅有当存在 Gerrit 无法自动解决的冲突时，才有必要进行手动 rebase。项目link:intro-project-owner.html#submit-type[合并方式]的配置也将影响是否需要手动解决冲突。

通常来说，修改不应被无意义 rebase，因为这将增加 patch set 数量从而给审查带来不必要的麻烦。然而，如果一个修改已经审查了很长时间，这时候过段时间 rebase 一次是很有必要的，同时也展示了开发者仍对这个修改有兴趣。

[NOTE]
Never rebase commits that are already part of a central branch.
请不要 rebase 已经被合并的 commits。

[[abandon]]
[[restore]]
== 搁置／恢复修改

有时候在代码审查时，一个修改太糟糕了以至于应当被放弃。这时，可以在 WEB 端link:user-review-ui.html#abandon[搁置修改]。被搁置的修改将不再出现在待合并的修改列表里。

被搁置的修改也可以在日后被link:user-review-ui.html#restore[恢复]。

[[topics]]
== Using Topics

Changes can be grouped by topics. This is useful because it allows you
to easily find related changes by using the
link:user-search.html#topic[topic search operator]. Also on the change
screen link:user-review-ui.html#same-topic[changes with the same topic]
are displayed so that you can easily navigate between them.

Often changes that together implement a feature or a user story are
group by a topic.

Assigning a topic to a change can be done in the
link:user-review-ui.html#project-branch-topic[change screen].

It is also possible to link:user-upload.html#topic[set a topic on
push], either by appending `%topic=...` to the ref name or through
the use of the command line flag `--push-option`, aliased to `-o`,
followed by `topic=...`.

.Set Topic on Push
----
  $ git push origin HEAD:refs/for/master%topic=multi-master

  // this is the same as:
  $ git push origin HEAD:refs/heads/master -o topic=multi-master
----

[[wip]]
== Work-in-Progress Changes

Work-in-Progress (WIP) changes are visible to anyone, but do not notify or
require an action from a reviewer.

Specifically, when you mark a change as Work-in-Progress:

* Reviewers are not notified for most operations, such as adding or removing,
  posting comments, and so on. See the REST API documentation
  link:rest-api-changes.html#set-review-notifications[tables] for more
  information.
* The change does not show in reviewers' dashboards.

WIP changes are useful when:

* You have implemented only part of a change, but want to push your change
  to the server to run tests or perform other actions before requesting
  reviewer feedback.
* During a review, you realize you need to rework your change, and you
  want to stop notifying reviewers of the change until you finish your
  update.

To set the status of a change to Work-in-Progress, you can use either
the command line or the user interface. To use the command line, append
`%wip` to your push request.

----
  $ git push origin HEAD:refs/for/master%wip
----
Alternatively, click *WIP* from the Change screen.

To mark the change as ready for review, append `%ready` to your push
request.

----
  $ git push origin HEAD:refs/for/master%ready
----
Alternatively, click *Ready* from the Change screen.

[[wip-polygerrit]]
In the new PolyGerrit UI, you can mark a change as WIP, by selecting *WIP* from
the *More* menu. The Change screen updates with a yellow header, indicating that
the change is in a Work-in-Progress state. To mark a change as ready for review,
click *Start Review*.

[[private-changes]]
== Private Changes

Private changes are changes that are only visible to their owners and
reviewers. Private changes are useful in a number of cases:

* You want to check what the change looks like before formal review starts.
  By marking the change private without reviewers, nobody can
  prematurely comment on your changes.

* You want to use Gerrit to sync data between different devices. By
  creating a private throwaway change without reviewers, you can push
  from one device, and fetch to another device.

* You want to do code review on a change that has sensitive
  aspects. By reviewing a security fix in a private change,
  outsiders can't discover the fix before it is pushed out. Even after
  merging the change, the review can be kept private.

To create a private change, you push it with the `private` option.

.Push a private change
----
  $ git commit
  $ git push origin HEAD:refs/for/master%private
----

The change will remain private on subsequent pushes until you specify
the `remove-private` option. Alternatively, the web UI provides buttons
to mark a change private and non-private again.

When pushing a private change with a commit that is authored by another
user, the other user will not be automatically added as a reviewer and
must be explicitly added.

For CI systems that must verify private changes, a special permission
can be granted
(link:access-control.html#category_view_private_changes[View Private Changes]).
In that case, care should be taken to prevent the CI system from
exposing secret details.

[[ignore]]
== Ignoring and Muting Changes

Changes can be ignored, which means they will not appear in the 'Incoming
Reviews' dashboard and any related email notifications will be suppressed.
This can be useful when you are added as a reviewer to a change on which
you do not actively participate in the review, but do not want to completely
remove yourself.

Alternatively, rather than completely ignoring the change, it can be muted.
Muting a change means it will always be marked as "reviewed" in dashboards,
until a new patch set is uploaded.

[[inline-edit]]
== Inline Edit

It is possible to link:user-inline-edit.html#editing-change[edit
changes inline] directly in the web UI. This is useful to make small
corrections immediately and publish them as a new patch set.

It is also possible to link:user-inline-edit.html#create-change[create
new changes inline].

[[project-administration]]
== Project Administration

Every project has a link:intro-project-owner.html#project-owner[project
owner] that administrates the project. Project administration includes
the configuration of the project
link:intro-project-owner.html#access-rights[access rights], but project
owners have many more possibilities to customize the workflows for a
project which are described in the link:intro-project-owner.html[
project owner guide].

[[no-code-review]]
== Working without Code Review

Doing code reviews with Gerrit is optional and you can use Gerrit
without code review as a pure Git server.

.Push with bypassing Code Review
----
  $ git commit
  $ git push origin HEAD:master

  // this is the same as:
  $ git commit
  $ git push origin HEAD:refs/heads/master
----

[NOTE]
Bypassing code review must be enabled in the project access rights. The
project owner must allow it by assigning the
link:access-control.html#category_push_direct[Push] access right on the
target branch (`refs/heads/<branch-name>`).

[NOTE]
If you bypass code review you always need to merge/rebase manually if
the tip of the destination branch has moved. Please keep this in mind
if you choose to not work with code review because you think it's
easier to avoid the additional complexity of the review workflow; it
might actually not be easier.

[NOTE]
The project owner may enable link:user-upload.html#auto_merge[
auto-merge on push] to benefit from the automatic merge/rebase on
server side while pushing directly into the repository.

[[user-refs]]
== User Refs

User configuration data such as link:#preferences[preferences] is
stored in the `All-Users` project under a per-user ref.  The user's
ref is based on the user's account id which is an integer.  The user
refs are sharded by the last two digits (`+nn+`) in the refname,
leading to refs of the format `+refs/users/nn/accountid+`.

[[preferences]]
== Preferences

There are several options to control the rendering in the Gerrit web UI.
Users can configure their preferences under `Settings` > `Preferences`.
The user's preferences are stored in a `git config` style file named
`preferences.config` under the link:#user-refs[user's ref] in the
`All-Users` project.

The following preferences can be configured:

- [[review-category]]`Display In Review Category`:
+
This setting controls how the values of the review labels in change
lists and dashboards are visualized.
+
** `None`:
+
For each review label only the voting value is shown. Approvals are
rendered as a green check mark icon, vetoes as a red X icon.
+
** `Show Name`:
+
For each review label the voting value is shown together with the full
name of the voting user.
+
** `Show Email`:
+
For each review label the voting value is shown together with the email
address of the voting user.
+
** `Show Username`:
+
For each review label the voting value is shown together with the
username of the voting user.
+
** `Show Abbreviated Name`:
+
For each review label the voting value is shown together with the
initials of the full name of the voting user.

- [[page-size]]`Maximum Page Size`:
+
The maximum number of entries that are shown on one page, e.g. used
when paging through changes, projects, branches or groups.

- [[date-time-format]]`Date/Time Format`:
+
The format that should be used to render dates and timestamps.

- [[email-notifications]]`Email Notifications`:
+
This setting controls the email notifications.
+
** `Enabled`:
+
Email notifications are enabled.
+
** [[cc-me]]`Every comment`:
+
Email notifications are enabled and you get notified by email as CC
on comments that you write yourself.
+
** `Disabled`:
+
Email notifications are disabled.

- [[email-format]]`Email Format`:
+
This setting controls the email format Gerrit sends. Note that this
setting has no effect if the administrator has disabled HTML emails
for the Gerrit instance.
+
** `Plaintext Only`:
+
Email notifications contain only plaintext content.
+
** `HTML and Plaintext`:
+
Email notifications contain both HTML and plaintext content.

- [[default-base-for-merges]]`Default Base For Merges`:
+
This setting controls which base should be pre-selected in the
`Diff Against` drop-down list when the change screen is opened for a
merge commit.
+
** `Auto Merge`:
+
Pre-selects `Auto Merge` in the `Diff Against` drop-down list when the
change screen is opened for a merge commit.
+
** `First Parent`:
+
Pre-selects `Parent 1` in the `Diff Against` drop-down list when the
change screen is opened for a merge commit.
+

- [[diff-view]]`Diff View`:
+
Whether the Side-by-Side diff view or the Unified diff view should be
shown when clicking on a file path in the change screen.

- [[show-site-header]]`Show Site Header / Footer`:
+
Whether the site header and footer should be shown.

- [[relative-dates]]`Show Relative Dates In Changes Table`:
+
Whether timestamps in change lists and dashboards should be shown as
relative timestamps, e.g. '12 days ago' instead of absolute timestamps
such as 'Apr 15'.

- [[change-size-bars]]`Show Change Sizes As Colored Bars`:
+
Whether change sizes should be visualized as colored bars. If disabled
the numbers of added and deleted lines are shown as text, e.g.
'+297, -63'.

- [[show-change-number]]`Show Change Number In Changes Table`:
+
Whether in change lists and dashboards an `ID` column with the numeric
change IDs should be shown.

- [[mute-common-path-prefixes]]`Mute Common Path Prefixes In File List`:
+
Whether common path prefixes in the file list on the change screen
should be link:user-review-ui.html#repeating-path-segments[grayed out].

- [[inline-signed-off]]`Insert Signed-off-by Footer For Inline Edit Changes`:
+
Whether a `Signed-off-by` footer should be automatically inserted into
changes that are created from the web UI (e.g. by the `Create Change`
and `Edit Config` buttons on the project screen, and the `Follow-Up`
button on the change screen).

- [[publish-comments-on-push]]`Publish Draft Comments When a Change Is Updated by Push`:
+
Whether to publish any outstanding draft comments by default when pushing
updates to open changes. This preference just sets the default; the behavior can
still be overridden using a link:user-upload.html#publish-comments[push option].

- [[use-flash]]`Use Flash Clipboard Widget`:
+
Whether the Flash clipboard widget should be used. If enabled and the Flash
plugin is available, Gerrit offers a copy-to-clipboard icon next to IDs and
commands that need to be copied frequently, such as the Change-Ids, commit IDs
and download commands. Note that this option is only shown if the Flash plugin
is available and the JavaScript Clipboard API is unavailable.

[[my-menu]]
In addition it is possible to customize the menu entries of the `My`
menu. This can be used to make the navigation to frequently used
screens, e.g. configured link:#dashboards[dashboards], quick.

[[reply-by-email]]
== Reply by Email

Gerrit sends out email notifications to users and supports parsing back replies
on some of them (when link:config-gerrit.html#receiveemail[configured]).

Gerrit supports replies on these notification emails:

* Notifications about new comments
* Notifications about new labels that were applied or removed

While Gerrit supports a wide range of email clients, the following ones have
been tested and are known to work:

* Gmail
* Gmail Mobile

Gerrit supports parsing back all comment types that can be applied to a change
via the WebUI:

* Change messages
* Inline comments
* File comments

Please note that comments can only be sent in reply to a comment in the original
notification email, while the change message is independent of those.

Gerrit supports parsing a user's reply from both HTML and plaintext. Please note
that some email clients extract the text from the HTML email they have received
and send this back as a quoted reply if you have set the client to plaintext
mode. In this case, Gerrit only supports parsing a change message. To work
around this issue, consider setting a <<email-format,User Preference>> to
receive only plaintext emails.

Example notification:
----
Some User has posted comments on this change.
(https://gerrit-review.googlesource.com/123123 )

Change subject: My new change
......................................................................


Patch Set 3:

Just a couple of smaller things I found.

https://gerrit-review.googlesource.com/#/c/123123/3/MyFile.java
File
MyFile.java:

https://gerrit-review.googlesource.com/#/c/123123/3/MyFile@420
PS3, Line 420:     someMethodCall(param);
Seems to be failing the tests.


--
To view, visit https://gerrit-review.googlesource.com/123123
To unsubscribe, visit https://gerrit-review.googlesource.com/settings

(Footers omitted for brevity, must be included in all emails)
----

Example response from the user:
----
Thanks, I'll fix it.
> Some User has posted comments on this change.
> (https://gerrit-review.googlesource.com/123123 )
>
> Change subject: My new change
> ......................................................................
>
>
> Patch Set 3:
>
> Just a couple of smaller things I found.
>
> https://gerrit-review.googlesource.com/#/c/123123/3/MyFile.java
> File
> MyFile.java:
Rename this file to File.java
>
> https://gerrit-review.googlesource.com/#/c/123123/3/MyFile@420
> PS3, Line 420:     someMethodCall(param);
> Seems to be failing the tests.
>
Yeah, I see why, let me try again.
>
> --
> To view, visit https://gerrit-review.googlesource.com/123123
> To unsubscribe, visit https://gerrit-review.googlesource.com/settings
>
> (Footers omitted for brevity, must be included in all emails)
----

In this case, Gerrit will persist a change message ("Thanks, I'll fix it."),
a file comment ("Rename this file to File.java") as well as a reply to an
inline comment ("Yeah, I see why, let me try again.").


GERRIT
------
这份文档是 link:index.html[Gerrit Code Review] 的一部分，由 mailto:i@adamyi.com[Adam Yi] 翻译。

SEARCHBOX
---------
